<?xml version="1.0"?>
<robot name="summit_xl" xmlns:xacro="http://www.ros.org/wiki/xacro"> 


	<!-- ***************** -->
	<!-- Imported elements -->
	<!-- ***************** -->
	
	<!-- First we import all posible elements defined in the urdf.xacro files. All these elements are defined as macro:xacros -->

	<!-- Import summit XL base elements -->
	<xacro:include filename="$(find summit_xl_description)/urdf/bases/tecnalia/summit_xl_base.urdf.xacro" />
  
	<!-- Import summit XL wheels -->
	<xacro:include filename="$(find summit_xl_description)/urdf/wheels/rubber_wheel.urdf.xacro" />
    
	<!-- Import all available sensors -->
	<xacro:include filename="$(find summit_xl_description)/urdf/sensors/all_sensors.urdf.xacro" />
  
    
	<!-- ***************** -->
	<!-- Global parameters -->
	<!-- ***************** -->
  
	<xacro:property name="PI" value="3.1415926535897931"/>
  
	<!-- Wheel parameters -->
	<xacro:property name="wheel_offset_x" value="0.223" />    <!-- x,y,z in translation from base_link to the center of the wheel -->
	<xacro:property name="wheel_offset_y" value="0.196" />    
	<xacro:property name="wheel_offset_z" value="0.0" />

	<!-- Flag to select the high or low quality model -->
	<xacro:property name="hq" value="true" />


	<!-- *************** -->
	<!-- Robots Elements -->
	<!-- *************** -->

	<!-- Here we create the robot elements using the xacro:macros imported at the beggining of this file -->

	<!-- Summit XL base -->
	<xacro:summit_xl_base name="summit_xl" publish_bf="true" hq="${hq}" />
  
	<!-- Gazebo ros control pluggins -->
	<xacro:ros_control/>
	
	<!-- Gazebo skid steering pluggins -->
	<xacro:skid_steering broadcastOdomTF="1"/>
  
  
	<!-- WHEELS -->
	<xacro:rubber_wheel name="front_right" parent="base_link" reflect="false" hq="${hq}">
		<origin xyz="${wheel_offset_x} -${wheel_offset_y} ${wheel_offset_z}" rpy="0 0 0"/>
	</xacro:rubber_wheel>
  
	<xacro:rubber_wheel name="front_left" parent="base_link" reflect="true" hq="${hq}">
		<origin xyz="${wheel_offset_x} ${wheel_offset_y} ${wheel_offset_z}" rpy="0 0 0"/>
	</xacro:rubber_wheel>
  
	<xacro:rubber_wheel name="back_left" parent="base_link" reflect="true" hq="${hq}">
		<origin xyz="-${wheel_offset_x} ${wheel_offset_y} ${wheel_offset_z}" rpy="0 0 0"/>
	</xacro:rubber_wheel>
  
	<xacro:rubber_wheel name="back_right" parent="base_link" reflect="false" hq="${hq}">
		<origin xyz="-${wheel_offset_x} -${wheel_offset_y} ${wheel_offset_z}" rpy="0 0 0"/>
	</xacro:rubber_wheel>


	<!-- SENSORS -->
	<xacro:sensor_hokuyo_utm30lx name="hokuyo1" parent="base_link">
		<!-- origin xyz="0.326 -0.211 0.193" rpy="0 0 0.7854"/ -->
		<origin xyz="0.346 -0.211 0.193" rpy="0 0 -0.7854"/>
	</xacro:sensor_hokuyo_utm30lx>

	<xacro:sensor_hokuyo_utm30lx name="hokuyo2" parent="base_link">
		<!-- origin xyz="-0.326 0.211 0.193" rpy="0 0 -0.7854"/ -->
		<origin xyz="-0.346 0.211 0.193" rpy="0 0 2.3562"/>
	</xacro:sensor_hokuyo_utm30lx>
  
<!--
	<xacro:sensor_hokuyo_urg04lx name="hokuyo1" parent="base_link">
		<origin xyz="-0.1 0.0 0.33" rpy="0 0 0"/>
	</xacro:sensor_hokuyo_urg04lx>
-->
    
	<xacro:sensor_axis_m5013 name="camera1" parent="base_link">
		<origin xyz="0.302 0.155 0.184" rpy="0 1.5708 0"/>
	</xacro:sensor_axis_m5013>

	<xacro:sensor_axis_m5013 name="camera2" parent="base_link">
		<origin xyz="0.0 0.216 0.169" rpy="-1.5708 0 0"/>
	</xacro:sensor_axis_m5013>
  
	<xacro:sensor_imu name="imu" parent="base_link">
		<origin xyz="-0.18 0.0 0.170" rpy="0 0 0"/>
	</xacro:sensor_imu>
  	
	<xacro:sensor_asus_xtion_pro name="camera_front" parent="base_link">
		<origin xyz="0.336 0.0 0.181" rpy="0 0 0"/> 
	</xacro:sensor_asus_xtion_pro>  
    
	<xacro:sensor_asus_xtion_pro name="camera_back" parent="base_link">
		<origin xyz="-0.336 0.0 0.181" rpy="0 0 0"/> 
	</xacro:sensor_asus_xtion_pro>  


<!--
	<xacro:sensor_kinect name="kinect" parent="base_link">
		<origin xyz="0.3 0.0 0.16" rpy="0 0 0"/> 
	</xacro:sensor_kinect>    
-->
<!--
	<xacro:sensor_fotonic name="fotonic" parent="base_link">
		<origin xyz="0.3 0.0 0.24" rpy="0 0 0"/> 
	</xacro:sensor_fotonic>  
-->
  
	
</robot>

